#TODO a minimalist clickable ui

#TODO check for bugs


GAME VERSIONS
# v2 added initiative, v3 added variability

GAME VERSIONS: Backwards COMPATIBILITY
#only Backwards compatibility, so we can use v3 units in v2 and v2 in v1
    #Don't set max_initiative or max_attack if not v3, don't set min_initiative if not at least v2

# version only matters on unit creation and battle_creator

# ask for the game version within battle_creator, then warn the user which units will be cut if going up a version
#   When versions change, the game switches pricing. invalid units are refunded. remaining units may be over budget.

# Have the db controler check game versions match before even giving it to the battle battle_creator


#TODO AI

# -- AI is difficult with modularity [in the pricing algorithm] 

#TODO figure out the basic structure and pricing systems for AI
#TODO a different system for deciding how AI pricing should be changed as more modules are activated
    -- #TODO start with AI pricing algorithm that's different depending on initiative/no init [v2] and variance/no variance [v3]


#TODO ALGORITHM MODULARITY
# build our foundation for modularity [in the pricing algorithm]
# the eventual goal is being totally modular.
# the whole system, including the input process, can switch itself around based on what's turned on and off

    -- #TODO a way to adjust unit._set_initiative_value() [v3 pricing] so we can make 'doormat'/'punching bag' units with zero initiative
        # assuming 0/0 is one, the price of a 0/0 init would be (2/5) * (base_health), before rounding [v3]


#unit prices are rounded to the nearest whole number (min 1) from floats. Watch for floating-point errors


# battle_coordinator only needs to know yes or no initiative, yes or no variability/rolling
    # The default without initiative is everything acting simultaneously
